 System:
Solve the following coding problem. Wrap your code answer using ```


Question:
Implement a binary search tree (BST) in C++ with methods for inserting, searching, and deleting nodes, ensuring that the tree remains balanced after deletions.


Answer:
Here's a simple implementation of a binary search tree (BST) in C++ with methods for inserting, searching, and deleting nodes. To ensure that the tree remains balanced after deletions, we can use a self-balancing BST, such as an AVL tree or a Red-Black tree. However, implementing a self-balancing BST is beyond the scope of this answer.

```cpp
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int data) : data(data), left(nullptr), right(nullptr) {}
};

class BST {
public:
    Node* root;

    BST() : root(nullptr) {}

    void insert(int data) {
        root = insert(root, data);
    }

    Node* insert(Node* node, int data) {
        if (node == nullptr) {
            return new Node(data);
        }

        if (data < node->data) {
            node->left = insert(node->left, data);
        } else if (data > node->data) {
            node->right = insert(node->right, data);
        }

        return node;
    }

    bool search(int data) {
        return search(root, data);
    }

    bool search(Node* node, int data) {
        if (node == nullptr) {
            return false;
        }

        if (data == node->data) {
            return true;
        }

        if (data < node->data) {
            return search(node->left, data);
        } else {
            return search(node->right, data);
        }
    }

    void deleteNode(int data) {
        root = deleteNode(root, data);
    }

    Node* deleteNode(Node* node, int data) {
        if (node == nullptr) {
            return node;
        }

        if (data < node->data) {
            node->left = deleteNode(node->left, data);
        } else if (data > node->data) {
            node->right = deleteNode(node->right, data);
        } else {
            if (node->left == nullptr) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                Node* temp