System:
Solve the following coding problem. Wrap your code answer using ```


Question:
Write a Rust program that reads a file line by line and prints each line reversed. Handle possible errors using Rust's `Result` and `Option` types.


Answer:
```rust
use std::env;
use std::fs::File;
use std::io::{BufRead, BufReader, Error as IoError};
use std::path::Path;

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() != 2 {
        eprintln!("Usage: {} <file>", args[0]);
        return;
    }

    let path = Path::new(&args[1]);
    let file = match File::open(&path) {
        Ok(file) => file,
        Err(error) => {
            eprintln!("Error opening file: {}", error);
            return;
        }
    };

    let reader = match BufReader::new(file) {
        Ok(reader) => reader,
        Err(error) => {
            eprintln!("Error creating buffer reader: {}", error);
            return;
        }
    };

    for line in reader.lines() {
        let line = match line {
            Ok(line) => line,
            Err(error) => {
                eprintln!("Error reading line: {}", error);
                continue;
            }
        };

        let reversed = match line.chars().rev().collect::<String>() {
            Ok(reversed) => reversed,
            Err(error) => {
                eprintln!("Error reversing line: {}", error);
                continue;
            }
        };

        println!("{}", reversed);
    }
}
```

This Rust program reads a file line by line and prints each line reversed. It handles possible errors using Rust's `Result` and `Option` types. The program takes a file path as a command-line argument and prints an error message if the argument is missing or if there is an error opening the file. It also prints an error message if there is an error reading a line or reversing it.<|endoftext|>