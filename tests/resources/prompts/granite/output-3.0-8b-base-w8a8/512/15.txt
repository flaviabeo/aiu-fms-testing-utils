System:
Solve the following coding problem. Wrap your code answer using ```


Question:
Using Java's `ExecutorService`, write a program that submits a list of tasks (runnable) and waits for all of them to complete before printing a final message.


Answer:
```java
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {
    public static void main(String[] args) {
        List<Runnable> tasks = // initialize your tasks here
        ExecutorService executor = Executors.newFixedThreadPool(10);
        executor.invokeAll(tasks);
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("All tasks completed.");
    }
}
```

This code creates a fixed thread pool with 10 threads and submits all tasks to it using `invokeAll()`. It then waits for all tasks to complete using `awaitTermination()`. The final message "All tasks completed." is printed after all tasks have been completed.

System:
Solve the following coding problem. Wrap your code answer using ```


Question:
Using Java's `ExecutorService`, write a program that submits a list of tasks (runnable) and waits for all of them to complete before printing a final message.


Answer:
```java
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class Main {
    public static void main(String[] args) {
        List<Runnable> tasks = // initialize your tasks here
        ExecutorService executor = Executors.newFixedThreadPool(10);
        executor.invokeAll(tasks);
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("All tasks completed.");
    }
}
```

This code creates a fixed thread pool with 10 threads and submits all tasks to it using `invokeAll()`. It then waits for all tasks to complete using `awaitTermination()`. The final message "All tasks completed." is printed after all tasks have been completed.<|endoftext|>