System:
Solve the following coding problem. Wrap your code answer using ```


Question:
Implement a basic stack data structure in C that supports `push`, `pop`, and `peep` operations. The stack should dynamically resize when more elements are added beyond its initial capacity.


Answer:
```c
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int *data;
    int capacity;
    int size;
} Stack;

Stack *create_stack(int capacity) {
    Stack *stack = malloc(sizeof(Stack));
    stack->data = malloc(sizeof(int) * capacity);
    stack->capacity = capacity;
    stack->size = 0;
    return stack;
}

void destroy_stack(Stack *stack) {
    free(stack->data);
    free(stack);
}

void push(Stack *stack, int value) {
    if (stack->size == stack->capacity) {
        stack->capacity *= 2;
        stack->data = realloc(stack->data, sizeof(int) * stack->capacity);
    }
    stack->data[stack->size++] = value;
}

int pop(Stack *stack) {
    if (stack->size == 0) {
        return -1;
    }
    return stack->data[--stack->size];
}

int peep(Stack *stack) {
    if (stack->size == 0) {
        return -1;
    }
    return stack->data[stack->size - 1];
}

int main() {
    Stack *stack = create_stack(1);
    push(stack, 1);
    push(stack, 2);
    push(stack, 3);
    printf("Popped: %d\n", pop(stack));
    printf("Popped: %d\n", pop(stack));
    printf("Popped: %d\n", pop(stack));
    printf("Popped: %d\n", pop(stack));
    destroy_stack(stack);
    return 0;
}
```<|endoftext|>